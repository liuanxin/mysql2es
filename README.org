
** MariaDB/MySQL to es

  同步 MariaDB/MySQL 表的数据到 es 的精简版本, 只支持添加和更新, 不支持物理删除(物理删除需要根据 binlog 才能处理), 建议使用逻辑删除(业务系统使用逻辑删除本身就是一件很自然的事).

  基于 jdk 8 和 spring boot, 支持 es 5.6.3(2017/11)

相关的配置如下:
#+BEGIN_SRC yaml
config:
  ip-port: ["127.0.0.1:9300"]     # 可以不设定, 默认是 127.0.0.1:9300
  cron: 0 * * * * *               # 可以不设定, 默认是每分钟执行一次

  index: platform                 # *** 必须设定. 表示 es 中 /index/type/id 的 index, 与 database name 对应
  relation:
    -
      table: t_product            # *** 必须设定且要有主键. 主键会生成 es 中 /index/type/id 的 id, 主键如果多个将会拼接
      increment-column: ["id"]    # *** 必须设定. 表示用来做数据增量操作时用, 一般使用自增 id 或 updateTime(更新时间戳)

    -
      table: t_some               # *** 必须设定且要有主键
      increment-column: ["id"]    # *** 必须设定

      type: some                  # 表示 es 中 /index/type/id 的 type, 不设定将会从数据库表名生成(t_some_one ==> someOne)
      scheme: false               # 是否事先基于 数据库表结构 生成 es 的 scheme, 默认是 true
      sql: select * from t_some   # 自定义的 sql 语句, 不设定将会自动从数据库表拼装. 如果只想生成指定字段, 上面的 scheme 设置为 false 并查询指定的字段即可
      limit: 10                   # 一次从数据库获取的条数, 默认是 50
      mapping:                    # 对应关系.「table column」:「es field」, 不设定将会从表字段生成(c_some_type ==> someType), 只设置特殊情况即可
        x_type: type
#+END_SRC

cron 的说明如下
#+BEGIN_EXAMPLE
.------------------- second (0 - 59)   if (0/10) then (0, 10, 20, 30, 40, 50) run
.  .---------------- minute (0 - 59)
.  .  .------------- hour (0 - 23)
.  .  .  .---------- day of month (1 - 31)
.  .  .  .  .------- month (1 - 12)   OR jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec
.  .  .  .  .  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
.  .  .  .  .  .
?  *  *  *  *  *

如  0/5 * * * * *  表示每 5 秒运行一次
#+END_EXAMPLE


** 运行
#+BEGIN_SRC conf
mvn clean package -DskipTests
# 这样会读取 application-prod.yml 文件的配置
nohup java -jar -Dspring.profiles.active=prod target/mysql2es-1.0-SNAPSHOT.jar >/dev/null 2>&1 &
#+END_SRC

or

#+BEGIN_SRC conf
# 这样会读取 application-prod.yml 文件的配置
nohup mvn spring-boot:run -DskipTests -Dspring.profiles.active=prod >/dev/null 2>&1 &
#+END_SRC



** 说明
项目在启动时会基于配置进行数据库查询, 将相关的表结构保存至 es.\\
而后定时器会基于设定的任务周期(每分钟)从临时文件读取上次处理的值(第一次时将会是空的)发起数据库查询并同步进 es 且将最后的值写进临时文件供下次任务使用.

PS : 第一次运行时可以将定时任务的周期尽量短一点, 比如 5 秒一次.
